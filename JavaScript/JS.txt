1)JavaScript Objects:
Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through what are called properties.
Here's a sample cat object:

const cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};

2)Accessing Object Properties with Dot Notation:
- Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
- const myObj = {
  prop1: "val1",
  prop2: "val2"
};

const prop1val = myObj.prop1; //val1
const prop2val = myObj.prop2; //val2

3)Accessing Object Properties with Bracket Notation:
- If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.
- However, you can still use bracket notation on object properties without spaces.

4)Updating Object Properties:
- const ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};
-  Here's how we update his object's name property: ourDog.name = "Happy Camper"; or ourDog["name"] = "Happy Camper";

5)Add New Properties to a JavaScript Object:
- You can add new properties to existing JavaScript objects the same way you would modify them.
   Here's how we would add a bark property to ourDog:
   ourDog.bark = "bow-wow";

6)Delete Properties from a JavaScript Object:
- We can also delete properties from objects like this:
  delete ourDog.bark;

7)Testing Objects for Properties:
- Sometimes it is useful to check if the property of a given object exists or not. We can use the .hasOwnProperty(propname) method of objects to determine if that object has the given property name

8) To see console in google chrome:
F12

9) To clear console:
console.clear()

10)To display error in console:
console.error(error message )

11)To display warning
console.warn(msg)


